openapi: 3.0.1
info:
    title: 'Bank API'
    description: 'Документация API банковского приложения'
    version: 1.0.0
servers:
    - {url: 'http://localhost:8080', description: 'Generated server url'}
tags:
    - {name: Аутентификация, description: 'Эндпоинты регистрации и логина'}
paths:
    '/api/cards/users/{holderId}/cards': {post: {tags: [card-controller], summary: 'Создание карты', description: 'Создание новой карты для пользователя с указанным ID', operationId: create, parameters: [{name: holderId, in: path, description: 'ID владельца карты', required: true, schema: {type: integer, format: int64}}], requestBody: {description: 'Данные для создания карты', content: {application/json: {schema: {$ref: '#/components/schemas/NewCardDto'}}}, required: true}, responses: {'201': {description: 'Карта успешно создана', content: {'*/*': {schema: {$ref: '#/components/schemas/CardDto'}}}}, '404': {description: 'Not Found', content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}}
    /api/auth/register: {post: {tags: [Аутентификация], summary: 'Регистрация нового пользователя', description: 'Регистрация пользователя с необходимыми данными', operationId: register, requestBody: {description: 'Данные для регистрации пользователя', content: {application/json: {schema: {$ref: '#/components/schemas/RegisterRequest'}}}, required: true}, responses: {'200': {description: 'Успешная регистрация', content: {application/json: {schema: {$ref: '#/components/schemas/AuthResponse'}}}}, '400': {description: 'Некорректные данные регистрации', content: {application/json: {schema: {$ref: '#/components/schemas/AuthResponse'}}}}, '404': {description: 'Not Found', content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}}
    /api/auth/login: {post: {tags: [Аутентификация], summary: 'Вход пользователя', description: 'Аутентификация пользователя с помощью логина и пароля', operationId: login, requestBody: {description: 'Данные для входа пользователя', content: {application/json: {schema: {$ref: '#/components/schemas/AuthRequest'}}}, required: true}, responses: {'200': {description: 'Успешный вход', content: {'*/*': {schema: {$ref: '#/components/schemas/AuthResponse'}}}}, '401': {description: 'Неверные учетные данные', content: {'*/*': {schema: {$ref: '#/components/schemas/AuthResponse'}}}}, '404': {description: 'Not Found', content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}}
    '/api/users/{userId}': {delete: {tags: [user-controller], summary: 'Удалить пользователя', description: 'Удаление пользователя по ID. Только для администраторов.', operationId: delete, parameters: [{name: userId, in: path, description: 'ID пользователя', required: true, schema: {type: integer, format: int64}}], responses: {'200': {description: 'Пользователь успешно удалён'}, '403': {description: 'Недостаточно прав'}, '404': {description: 'Пользователь не найден'}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}, patch: {tags: [user-controller], summary: 'Обновить данные пользователя', description: 'Обновление данных пользователя по ID. Только для администраторов.', operationId: update, parameters: [{name: userId, in: path, description: 'ID пользователя', required: true, schema: {type: integer, format: int64}}], requestBody: {description: 'Обновленные данные пользователя', content: {application/json: {schema: {$ref: '#/components/schemas/UpdateUserDto'}}}, required: true}, responses: {'200': {description: 'Пользователь успешно обновлён', content: {'*/*': {schema: {$ref: '#/components/schemas/UserDto'}}}}, '403': {description: 'Недостаточно прав', content: {'*/*': {schema: {$ref: '#/components/schemas/UserDto'}}}}, '404': {description: 'Пользователь не найден'}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}}
    /api/transfer: {patch: {tags: [transfer-controller], summary: 'Перевод между картами', description: 'Выполнение перевода средств с одной карты на другую. Доступ разрешён только не заблокированным пользователям.', operationId: transfer, requestBody: {description: 'Данные для перевода', content: {application/json: {schema: {$ref: '#/components/schemas/TransferDto'}}}, required: true}, responses: {'200': {description: 'Перевод успешно выполнен', content: {'*/*': {schema: {$ref: '#/components/schemas/TransferDto'}}}}, '400': {description: 'Невалидные данные для перевода', content: {'*/*': {schema: {$ref: '#/components/schemas/TransferDto'}}}}, '403': {description: 'Пользователь заблокирован', content: {'*/*': {schema: {$ref: '#/components/schemas/TransferDto'}}}}, '404': {description: 'Not Found', content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}}
    '/api/cards/{cardId}/status': {patch: {tags: [card-controller], summary: 'Обновление статуса карты', description: 'Обновление статуса карты по ID карты', operationId: updateStatus, parameters: [{name: cardId, in: path, description: 'ID карты', required: true, schema: {type: integer, format: int64}}, {name: status, in: query, description: 'Новый статус карты', required: true, schema: {type: string, enum: [ACTIVE, BLOCKED, EXPIRED]}}], responses: {'200': {description: 'Статус успешно обновлен', content: {'*/*': {schema: {$ref: '#/components/schemas/CardDto'}}}}, '404': {description: 'Not Found', content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}}
    /api/cards: {get: {tags: [card-controller], summary: 'Получить все карты', description: 'Получение списка всех карт с возможностью фильтрации по cardId и постраничной навигацией', operationId: getAll, parameters: [{name: cardId, in: query, description: 'Фильтрация по ID карты', required: false, schema: {type: integer, format: int64}}, {name: page, in: query, description: 'Номер страницы', required: false, schema: {type: integer, format: int32, default: 0}}, {name: size, in: query, description: 'Размер страницы', required: false, schema: {type: integer, format: int32, default: 10}}], responses: {'200': {description: 'Список карт', content: {'*/*': {schema: {$ref: '#/components/schemas/CardDto'}}}}, '404': {description: 'Not Found', content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}}
    /api/cards/my: {get: {tags: [card-controller], summary: 'Получить карты текущего пользователя', description: 'Получение списка карт, принадлежащих текущему пользователю (или админом)', operationId: getByHolder, parameters: [{name: page, in: query, description: 'Номер страницы', required: false, schema: {type: integer, format: int32, default: 0}}, {name: size, in: query, description: 'Размер страницы', required: false, schema: {type: integer, format: int32, default: 10}}], responses: {'200': {description: 'Список карт пользователя', content: {'*/*': {schema: {$ref: '#/components/schemas/UserCardDto'}}}}, '404': {description: 'Not Found', content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}}
    '/api/cards/{cardId}': {delete: {tags: [card-controller], summary: 'Удаление карты', description: 'Удаление карты по ID', operationId: delete_1, parameters: [{name: cardId, in: path, description: 'ID карты', required: true, schema: {type: integer, format: int64}}], responses: {'200': {description: 'Карта успешно удалена'}, '404': {description: 'Not Found', content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}, '409': {description: Conflict, content: {'*/*': {schema: {type: object, additionalProperties: {type: string}}}}}}}}
components:
    schemas: {NewCardDto: {required: [cardNumber], type: object, properties: {cardNumber: {pattern: '\d{4} \d{4} \d{4} \d{4}', type: string, description: 'Номер карты', example: '1234 5678 9012 3456'}, expiryDate: {type: string, description: 'Дата окончания срока действия карты', format: date, example: '2026-12-31'}, balance: {type: number, description: 'Начальный баланс карты', format: double, example: 1000}}, description: 'DTO для создания новой карты'}, Card: {type: object, properties: {id: {type: integer, format: int64}, number: {type: string}, user: {$ref: '#/components/schemas/User'}, expiryDate: {type: string, format: date}, status: {type: string, enum: [ACTIVE, BLOCKED, EXPIRED]}, balance: {type: number, format: double}}}, CardDto: {type: object, properties: {id: {type: integer, description: 'ID карты', format: int64, example: 1}, number: {pattern: '\d{4} \d{4} \d{4} \d{4}', type: string, description: 'Номер карты', example: '1234 5678 9012 3456'}, user: {$ref: '#/components/schemas/User'}, expiryDate: {type: string, description: 'Дата окончания срока действия карты', format: date, example: '2026-12-31'}, status: {type: string, description: 'Статус карты', enum: [ACTIVE, BLOCKED, EXPIRED]}, balance: {type: number, description: 'Баланс карты', format: double, example: 1500.5}}, description: 'DTO для существующей карты'}, User: {type: object, properties: {id: {type: integer, format: int64}, login: {type: string}, password: {type: string}, name: {type: string}, cards: {type: array, items: {$ref: '#/components/schemas/Card'}}, roles: {uniqueItems: true, type: array, items: {type: string, enum: [USER, ADMIN]}}, isBlocked: {type: boolean}}, description: 'Пользователь-владелец карты'}, RegisterRequest: {required: [login, password], type: object, properties: {login: {type: string, description: 'Логин нового пользователя', example: newuser}, password: {type: string, description: 'Пароль нового пользователя', example: newpassword}, name: {type: string, description: 'Имя пользователя', example: 'Иван Иванов'}}, description: 'Данные для регистрации нового пользователя'}, AuthResponse: {type: object, properties: {token: {type: string, description: 'JWT токен для доступа', example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...}}, description: 'Ответ при успешной аутентификации'}, AuthRequest: {required: [login, password], type: object, properties: {login: {type: string, description: 'Логин пользователя', example: user123}, password: {type: string, description: 'Пароль пользователя', example: password123}}, description: 'Данные для аутентификации пользователя'}, UpdateUserDto: {type: object, properties: {login: {type: string, description: 'Новый логин пользователя', example: janedoe}, name: {type: string, description: 'Новое имя пользователя', example: 'Jane Doe'}, roles: {uniqueItems: true, type: array, description: 'Набор новых ролей', example: [ADMIN], items: {type: string, description: 'Набор новых ролей', example: '["ADMIN"]', enum: [USER, ADMIN]}}, isBlocked: {type: boolean, description: 'Флаг блокировки', example: true}}, description: 'Данные для обновления пользователя'}, UserDto: {type: object, properties: {id: {type: integer, description: 'ID пользователя', format: int64, example: 1}, login: {type: string, description: 'Логин пользователя', example: johndoe}, name: {type: string, description: 'Имя пользователя', example: 'John Doe'}, cards: {type: array, description: 'Список карт пользователя', items: {$ref: '#/components/schemas/Card'}}, roles: {uniqueItems: true, type: array, description: 'Роли пользователя', example: [ADMIN, USER], items: {type: string, description: 'Роли пользователя', example: '["ADMIN","USER"]', enum: [USER, ADMIN]}}, isBlocked: {type: boolean, description: 'Заблокирован ли пользователь', example: false}}, description: 'Информация о пользователе'}, TransferDto: {required: [difference, fromNumber, toNumber], type: object, properties: {fromNumber: {maxLength: 19, minLength: 19, pattern: '\d{4} \d{4} \d{4} \d{4}', type: string, description: 'Номер карты отправителя', example: '1234 5678 9012 3456'}, toNumber: {maxLength: 19, minLength: 19, pattern: '\d{4} \d{4} \d{4} \d{4}', type: string, description: 'Номер карты получателя', example: '6543 2109 8765 4321'}, difference: {minimum: 0, type: number, description: 'Сумма перевода', format: double, example: 100}}, description: 'Данные для перевода между картами'}, UserCardDto: {type: object, properties: {id: {type: integer, description: 'ID карты', format: int64, example: 1}, number: {type: string, description: 'Номер карты', example: '1234 5678 9012 3456'}, user: {$ref: '#/components/schemas/User'}, expiryDate: {type: string, description: 'Дата окончания срока действия карты', format: date, example: '2026-12-31'}, status: {type: string, description: 'Статус карты', enum: [ACTIVE, BLOCKED, EXPIRED]}, balance: {type: number, description: 'Баланс карты', format: double, example: 1500}}, description: 'DTO для карты пользователя'}}
